@startuml Manage Reservation (GET ALL)

header Restaurant Reservation Sequence Diagram
footer Page %page% of %lastpage%
title "Manage Reservation (GET ALL BY RESTAURANT ID)"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:restaurants" as routerRestaurants
participant "<<router>>\n:reservations" as routerReservations
participant "<<middleware>>\n:auth" as middlewareAuth
participant "<<controllers>>\n:reservations" as controllersReservations
participant "<<model>>\n:Reservation" as modelReservation
participant "<<model>>\n:User" as modelUser
database "<<MongoDB>>\n:reservations" as ReservationsDatabase
database "<<MongoDB>>\n:users" as UsersDatabase

' GET ALL BY RESTAURANT ID
client->server ++:req.get('/restaurants/:restaurantId/reservations')
server->routerRestaurants ++:app.use('/restaurants',restaurants)
routerRestaurants->routerReservations ++:router.use('/:restaurantId/reservations', reservationRouter)
routerReservations -> middlewareAuth ++:protect()
middlewareAuth -> modelUser ++:findById(decodedToken.id)
modelUser -> UsersDatabase ++:UserSchema
UsersDatabase -> modelUser --:user
modelUser -> middlewareAuth --:user
middlewareAuth -> controllersReservations ++:getReservations()

alt req.user.role !== 'admin'
    controllersReservations->modelReservation ++:find({ user: req.user.id, restaurant: req.params.restaurantId })
else
    controllersReservations->modelReservation :find({ restaurant: req.params.restaurantId })
end

modelReservation ->ReservationsDatabase ++: ReservationSchema
ReservationsDatabase --> modelReservation --: reservations
controllersReservations <-- modelReservation --:reservations
controllersReservations->client --:response

@enduml